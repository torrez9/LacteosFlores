name: Dependency Security Scan

on:
  push:
    branches: [ "main", "develop", "Workflows" ]
  pull_request:
    branches: [ "main", "develop", "Workflows" ]
  schedule:
    # Ejecución programada semanal para análisis preventivo
    - cron: '0 3 * * 2' # Todos los martes a las 3 AM

# Configuración global
env:
  PHP_VERSION: '8.2'
  COMPOSER_FLAGS: '--no-interaction --no-progress --prefer-dist'

# Permisos para commits automáticos
permissions:
  contents: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      critical_vulnerabilities: ${{ steps.evaluate-vulnerabilities.outputs.critical_vulnerabilities }}
      high_vulnerabilities: ${{ steps.evaluate-vulnerabilities.outputs.high_vulnerabilities }}
      total_vulnerabilities: ${{ steps.evaluate-vulnerabilities.outputs.total_vulnerabilities }}
      scan_status: ${{ steps.evaluate-vulnerabilities.outputs.scan_status }}

    steps:
      # PREPARACION DEL ENTORNO
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-deps-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-deps-

      - name: Install Composer dependencies
        run: |
          composer install ${{ env.COMPOSER_FLAGS }}
          composer dump-autoload -o

      # HERRAMIENTAS DE ANALISIS DE DEPENDENCIAS
      
      # Auditoría de Composer - Análisis principal
      - name: Run Composer Security Audit
        run: |
          mkdir -p reports
          echo "Ejecutando auditoria de seguridad de Composer..."
          composer audit --format=json > reports/composer-audit.json 2>/dev/null || echo '{"advisories": {}}' > reports/composer-audit.json
          echo "=== RESULTADOS COMPOSER AUDIT ==="
          composer audit --format=table || echo "Composer audit completado"

      # Análisis de dependencias desactualizadas
      - name: Check for outdated dependencies
        run: |
          echo "Verificando dependencias desactualizadas..."
          composer outdated --direct --format=json > reports/composer-outdated.json 2>/dev/null || echo '{"installed": []}' > reports/composer-outdated.json
          echo "=== DEPENDENCIAS DESACTUALIZADAS ==="
          composer outdated --direct --format=table || echo "Todas las dependencias están actualizadas"

      # EVALUACION DE VULNERABILIDADES MEJORADA
      - name: Evaluate dependency vulnerabilities
        id: evaluate-vulnerabilities
        run: |
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          TOTAL_COUNT=0
          SCAN_STATUS="clean"

          # Instalar jq si no está disponible
          if ! command -v jq &> /dev/null; then
            echo "Instalando jq para procesamiento JSON..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Analizar resultados de Composer Audit
          if [ -f "reports/composer-audit.json" ]; then
            echo "Analizando resultados de Composer Audit..."
            COMPOSER_ADVISORIES=$(jq -r '.advisories | length' reports/composer-audit.json 2>/dev/null || echo 0)
            
            # Contar severidades si están disponibles en el formato
            if [ $COMPOSER_ADVISORIES -gt 0 ]; then
              # Composer audit no proporciona severidades directamente, considerar todas como alta
              HIGH_COUNT=$COMPOSER_ADVISORIES
              TOTAL_COUNT=$COMPOSER_ADVISORIES
            fi
            
            echo "Composer Audit - Advisory reports: $COMPOSER_ADVISORIES"
          fi

          # Analizar dependencias desactualizadas
          if [ -f "reports/composer-outdated.json" ]; then
            echo "Analizando dependencias desactualizadas..."
            OUTDATED_COUNT=$(jq -r '.installed | length' reports/composer-outdated.json 2>/dev/null || echo 0)
            echo "Dependencias desactualizadas: $OUTDATED_COUNT"
            
            # Considerar dependencias mayormente desactualizadas como advertencia
            if [ $OUTDATED_COUNT -gt 5 ]; then
              HIGH_COUNT=$((HIGH_COUNT + 1))
            fi
          fi

          # Determinar estado del escaneo basado en Composer Audit
          if [ $COMPOSER_ADVISORIES -gt 0 ]; then
            SCAN_STATUS="critical"
          elif [ $OUTDATED_COUNT -gt 5 ]; then
            SCAN_STATUS="high"
          elif [ $OUTDATED_COUNT -gt 0 ]; then
            SCAN_STATUS="warning"
          else
            SCAN_STATUS="clean"
          fi

          echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_vulnerabilities=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "total_vulnerabilities=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          echo "scan_status=$SCAN_STATUS" >> $GITHUB_OUTPUT

          echo "========================================"
          echo "RESUMEN DE SEGURIDAD EN DEPENDENCIAS"
          echo "========================================"
          echo "Advertencias de seguridad: $COMPOSER_ADVISORIES"
          echo "Dependencias desactualizadas: $OUTDATED_COUNT"
          echo "Estado del escaneo: $SCAN_STATUS"
          echo "========================================"

      # SUBIR ARTEFACTOS
      - name: Upload dependency scan reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            reports/
          retention-days: 30

      # GENERAR REPORTE DETALLADO
      - name: Generate dependency security report
        run: |
          mkdir -p docs
          REPORT="docs/dependency-security-report.md"
          
          echo "# Dependency Security Analysis Report" > $REPORT
          echo "**Generated:** $(date)" >> $REPORT
          echo "**Branch:** $GITHUB_REF_NAME" >> $REPORT
          echo "**Commit:** $GITHUB_SHA" >> $REPORT
          echo "" >> $REPORT
          
          # Resumen Ejecutivo
          echo "## Executive Summary" >> $REPORT
          echo "" >> $REPORT
          echo "- **Scan Status:** ${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" >> $REPORT
          echo "- **Security Advisories:** ${{ steps.evaluate-vulnerabilities.outputs.total_vulnerabilities }}" >> $REPORT
          echo "- **Scan Date:** $(date)" >> $REPORT
          echo "" >> $REPORT
          
          # Analisis por Herramienta
          echo "## Analysis Details" >> $REPORT
          echo "" >> $REPORT
          echo "### Composer Security Audit" >> $REPORT
          echo "- **Purpose:** Security advisory check for PHP dependencies" >> $REPORT
          echo "- **Scope:** composer.json and composer.lock" >> $REPORT
          echo "- **Advisories Found:** ${{ steps.evaluate-vulnerabilities.outputs.total_vulnerabilities }}" >> $REPORT
          echo "" >> $REPORT
          
          echo "### Dependency Update Status" >> $REPORT
          echo "- **Purpose:** Check for outdated dependencies" >> $REPORT
          echo "- **Scope:** Direct dependencies only" >> $REPORT
          echo "- **Status:** Based on latest available versions" >> $REPORT
          echo "" >> $REPORT
          
          # Hallazgos y Recomendaciones
          echo "## Findings and Recommendations" >> $REPORT
          echo "" >> $REPORT
          
          if [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "critical" ]; then
            echo "### URGENT ACTION REQUIRED" >> $REPORT
            echo "Security advisories detected that require immediate remediation." >> $REPORT
            echo "1. Update dependencies with security advisories immediately" >> $REPORT
            echo "2. Review composer audit report for detailed information" >> $REPORT
            echo "3. Run 'composer audit' locally to see specific advisories" >> $REPORT
          elif [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "high" ]; then
            echo "### HIGH PRIORITY ACTION NEEDED" >> $REPORT
            echo "Multiple outdated dependencies detected that should be addressed soon." >> $REPORT
            echo "1. Plan updates for outdated dependencies" >> $REPORT
            echo "2. Schedule remediation within the next development cycle" >> $REPORT
            echo "3. Run 'composer outdated' to see specific packages" >> $REPORT
          elif [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "warning" ]; then
            echo "### RECOMMENDED ACTIONS" >> $REPORT
            echo "Some outdated dependencies detected. Consider addressing in future updates." >> $REPORT
            echo "1. Monitor dependencies for security updates" >> $REPORT
            echo "2. Update during regular maintenance cycles" >> $REPORT
          else
            echo "### SECURITY STATUS: CLEAN" >> $REPORT
            echo "No security advisories detected and dependencies are up to date." >> $REPORT
            echo "Continue regular dependency update practices." >> $REPORT
          fi
          echo "" >> $REPORT
          
          # Comandos útiles
          echo "## Useful Commands" >> $REPORT
          echo "" >> $REPORT
          echo "```bash" >> $REPORT
          echo "# View security advisories" >> $REPORT
          echo "composer audit" >> $REPORT
          echo "" >> $REPORT
          echo "# View outdated dependencies" >> $REPORT
          echo "composer outdated --direct" >> $REPORT
          echo "" >> $REPORT
          echo "# Update all dependencies" >> $REPORT
          echo "composer update" >> $REPORT
          echo "" >> $REPORT
          echo "# Update specific dependency" >> $REPORT
          echo "composer update vendor/package" >> $REPORT
          echo "```" >> $REPORT
          echo "" >> $REPORT
          
          # Metricas de Mejora
          echo "## Improvement Metrics" >> $REPORT
          echo "" >> $REPORT
          echo "- **Scan Coverage:** PHP dependencies only" >> $REPORT
          echo "- **Recommended Remediation Time:**" >> $REPORT
          if [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "critical" ]; then
            echo "  - Critical: 24-48 hours" >> $REPORT
          elif [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "high" ]; then
            echo "  - High: 1-2 weeks" >> $REPORT
          else
            echo "  - Warning: Next release cycle" >> $REPORT
          fi
          echo "- **Automated Scanning:** Enabled (weekly and on push)" >> $REPORT
          echo "" >> $REPORT
          
          echo "---" >> $REPORT
          echo "*Automatically generated by GitHub Actions Dependency Scan*" >> $REPORT
          echo "" >> $REPORT

      # COMMIT AUTOMATICO DEL REPORTE (solo en ramas principales)
      - name: Commit security report
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/dependency-security-report.md
          # Solo hacer commit si hay cambios
          git diff --staged --quiet || (git commit -m "docs: Update dependency security report [skip ci]" && git push) || echo "No changes to commit"

  # EVALUACION FINAL DE SEGURIDAD
  security-assessment:
    name: Security Assessment
    runs-on: ubuntu-latest
    needs: dependency-scan
    if: always()
    
    steps:
      - name: Generate security assessment
        run: |
          echo "DEPENDENCY SECURITY ASSESSMENT"
          echo "=============================="
          echo "Security Advisories: ${{ needs.dependency-scan.outputs.total_vulnerabilities }}"
          echo "Scan Status: ${{ needs.dependency-scan.outputs.scan_status }}"
          echo ""
          
          if [ "${{ needs.dependency-scan.outputs.scan_status }}" = "critical" ]; then
            echo "ASSESSMENT: CRITICAL - Security advisories detected"
            echo "Immediate action required to update dependencies."
            echo "Run 'composer audit' for details."
            exit 1
          elif [ "${{ needs.dependency-scan.outputs.scan_status }}" = "high" ]; then
            echo "ASSESSMENT: WARNING - Multiple outdated dependencies"
            echo "Plan dependency updates in the near future."
            echo "Run 'composer outdated --direct' for details."
          else
            echo "ASSESSMENT: PASSED - Dependencies are secure"
            echo "No critical security issues detected."
          fi