name: Dependency Security Scan

on:
  push:
    branches: [ "Workflows" ]
  pull_request:
    branches: [ "Workflows" ]
  schedule:
    # Ejecución programada semanal para análisis preventivo
    - cron: '0 3 * * 2' # Todos los martes a las 3 AM

# Configuración global
env:
  PHP_VERSION: '8.2'
  COMPOSER_FLAGS: '--no-interaction --no-progress --prefer-dist'

# Permisos para commits automáticos
permissions:
  contents: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    outputs:
      critical_vulnerabilities: ${{ steps.evaluate-vulnerabilities.outputs.critical_vulnerabilities }}
      high_vulnerabilities: ${{ steps.evaluate-vulnerabilities.outputs.high_vulnerabilities }}
      total_vulnerabilities: ${{ steps.evaluate-vulnerabilities.outputs.total_vulnerabilities }}
      scan_status: ${{ steps.evaluate-vulnerabilities.outputs.scan_status }}

    steps:
      # PREPARACION DEL ENTORNO
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-deps-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-deps-

      - name: Install Composer dependencies
        run: |
          composer install ${{ env.COMPOSER_FLAGS }}
          composer dump-autoload -o

      # HERRAMIENTAS DE ANALISIS DE DEPENDENCIAS
      
      # Auditoría de Composer
      - name: Run Composer Security Audit
        run: |
          mkdir -p reports
          echo "Ejecutando auditoria de seguridad de Composer..."
          composer audit --format=json > reports/composer-audit.json 2>/dev/null || echo '{"advisories": {}}' > reports/composer-audit.json
          composer audit --format=table || echo "Composer audit completado"

      # Crear archivo de supresiones si no existe
      - name: Create suppression file if missing
        run: |
          mkdir -p .github
          if [ ! -f ".github/dependency-check-suppressions.xml" ]; then
            cat > .github/dependency-check-suppressions.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
              <!-- Ejemplo de supresión para falsos positivos -->
              <!--
              <suppress>
                  <notes><![CDATA[Supresión para falso positivo en librería específica]]></notes>
                  <packageUrl regex="true">^pkg:composer/example/package@.*$</packageUrl>
                  <vulnerabilityName regex="true">.*</vulnerabilityName>
              </suppress>
              -->
          </suppressions>
          EOF
            echo "Archivo de supresiones creado en .github/dependency-check-suppressions.xml"
          else
            echo "Archivo de supresiones ya existe"
          fi

      # OWASP Dependency Check - Análisis completo CORREGIDO
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Laravel Application"
          path: "./"
          format: "HTML,JSON,CSV"
          out: "reports"
          args: |
            --enableRetired
            --failOnCVSS 7
            --scan vendor/
            --suppression ".github/dependency-check-suppressions.xml"

      # EVALUACION DE VULNERABILIDADES MEJORADA
      - name: Evaluate dependency vulnerabilities
        id: evaluate-vulnerabilities
        run: |
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          TOTAL_COUNT=0
          SCAN_STATUS="clean"

          # Instalar jq si no está disponible
          if ! command -v jq &> /dev/null; then
            echo "Instalando jq para procesamiento JSON..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Analizar resultados de Composer Audit
          if [ -f "reports/composer-audit.json" ]; then
            echo "Analizando resultados de Composer Audit..."
            COMPOSER_ADVISORIES=$(jq -r '.advisories | length' reports/composer-audit.json 2>/dev/null || echo 0)
            TOTAL_COUNT=$((TOTAL_COUNT + COMPOSER_ADVISORIES))
            echo "Composer Audit - Advisory reports: $COMPOSER_ADVISORIES"
          fi

          # Analizar resultados de OWASP Dependency Check
          if [ -f "reports/dependency-check-report.json" ]; then
            echo "Analizando resultados de OWASP Dependency Check..."
            
            # Contar vulnerabilidades por severidad
            CRITICAL_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL") | .name' reports/dependency-check-report.json 2>/dev/null | sort -u | wc -l || echo 0)
            HIGH_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH") | .name' reports/dependency-check-report.json 2>/dev/null | sort -u | wc -l || echo 0)
            MEDIUM_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "MEDIUM") | .name' reports/dependency-check-report.json 2>/dev/null | sort -u | wc -l || echo 0)
            LOW_COUNT=$(jq -r '.dependencies[]?.vulnerabilities[]? | select(.severity == "LOW") | .name' reports/dependency-check-report.json 2>/dev/null | sort -u | wc -l || echo 0)
            
            ALL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
            TOTAL_COUNT=$((TOTAL_COUNT + ALL_VULNS))
            
            echo "OWASP Dependency Check - Vulnerabilidades:"
            echo "  Criticas: $CRITICAL_COUNT"
            echo "  Altas: $HIGH_COUNT"
            echo "  Medias: $MEDIUM_COUNT"
            echo "  Bajas: $LOW_COUNT"
            echo "  Total: $ALL_VULNS"
          else
            echo "Advertencia: No se encontró el archivo dependency-check-report.json"
          fi

          # Determinar estado del escaneo
          if [ $CRITICAL_COUNT -gt 0 ]; then
            SCAN_STATUS="critical"
          elif [ $HIGH_COUNT -gt 0 ]; then
            SCAN_STATUS="high"
          elif [ $TOTAL_COUNT -gt 0 ]; then
            SCAN_STATUS="warning"
          else
            SCAN_STATUS="clean"
          fi

          echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_vulnerabilities=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "total_vulnerabilities=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          echo "scan_status=$SCAN_STATUS" >> $GITHUB_OUTPUT

          echo "========================================"
          echo "RESUMEN DE VULNERABILIDADES EN DEPENDENCIAS"
          echo "========================================"
          echo "Vulnerabilidades criticas: $CRITICAL_COUNT"
          echo "Vulnerabilidades altas: $HIGH_COUNT"
          echo "Total de vulnerabilidades: $TOTAL_COUNT"
          echo "Estado del escaneo: $SCAN_STATUS"
          echo "========================================"

      # SUBIR ARTEFACTOS
      - name: Upload dependency scan reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            reports/
          retention-days: 30

      # GENERAR REPORTE DETALLADO
      - name: Generate dependency security report
        run: |
          mkdir -p docs
          REPORT="docs/dependency-security-report.md"
          
          echo "# Dependency Security Analysis Report" > $REPORT
          echo "**Generated:** $(date)" >> $REPORT
          echo "**Branch:** $GITHUB_REF_NAME" >> $REPORT
          echo "**Commit:** $GITHUB_SHA" >> $REPORT
          echo "" >> $REPORT
          
          # Resumen Ejecutivo
          echo "## Executive Summary" >> $REPORT
          echo "" >> $REPORT
          echo "- **Scan Status:** ${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" >> $REPORT
          echo "- **Critical Vulnerabilities:** ${{ steps.evaluate-vulnerabilities.outputs.critical_vulnerabilities }}" >> $REPORT
          echo "- **High Severity Vulnerabilities:** ${{ steps.evaluate-vulnerabilities.outputs.high_vulnerabilities }}" >> $REPORT
          echo "- **Total Vulnerabilities Found:** ${{ steps.evaluate-vulnerabilities.outputs.total_vulnerabilities }}" >> $REPORT
          echo "" >> $REPORT
          
          # Analisis por Herramienta
          echo "## Analysis by Tool" >> $REPORT
          echo "" >> $REPORT
          echo "### Composer Security Audit" >> $REPORT
          echo "- **Purpose:** Security advisory check for PHP dependencies" >> $REPORT
          echo "- **Scope:** composer.json and composer.lock" >> $REPORT
          echo "" >> $REPORT
          
          echo "### OWASP Dependency Check" >> $REPORT
          echo "- **Purpose:** Comprehensive vulnerability scanning" >> $REPORT
          echo "- **Scope:** All dependencies in vendor/ directory" >> $REPORT
          echo "- **CVSS Threshold:** 7.0 (Medium and above)" >> $REPORT
          echo "- **Suppression File:** .github/dependency-check-suppressions.xml" >> $REPORT
          echo "" >> $REPORT
          
          # Hallazgos y Recomendaciones
          echo "## Findings and Recommendations" >> $REPORT
          echo "" >> $REPORT
          
          if [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "critical" ]; then
            echo "### URGENT ACTION REQUIRED" >> $REPORT
            echo "Critical vulnerabilities detected that require immediate remediation." >> $REPORT
            echo "1. Update dependencies with critical vulnerabilities immediately" >> $REPORT
            echo "2. Review dependency-check-report.html for detailed information" >> $REPORT
            echo "3. Consider alternative packages if updates are not available" >> $REPORT
          elif [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "high" ]; then
            echo "### HIGH PRIORITY ACTION NEEDED" >> $REPORT
            echo "High severity vulnerabilities detected that should be addressed soon." >> $REPORT
            echo "1. Plan updates for dependencies with high severity vulnerabilities" >> $REPORT
            echo "2. Schedule remediation within the next development cycle" >> $REPORT
          elif [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "warning" ]; then
            echo "### RECOMMENDED ACTIONS" >> $REPORT
            echo "Some vulnerabilities detected. Consider addressing in future updates." >> $REPORT
            echo "1. Monitor dependencies for security updates" >> $REPORT
            echo "2. Update during regular maintenance cycles" >> $REPORT
          else
            echo "### SECURITY STATUS: CLEAN" >> $REPORT
            echo "No critical or high severity vulnerabilities detected." >> $REPORT
            echo "Continue regular dependency update practices." >> $REPORT
          fi
          echo "" >> $REPORT
          
          # Metricas de Mejora
          echo "## Improvement Metrics" >> $REPORT
          echo "" >> $REPORT
          echo "- **Scan Coverage:** 100% of dependencies" >> $REPORT
          echo "- **Recommended Remediation Time:**" >> $REPORT
          if [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "critical" ]; then
            echo "  - Critical: 24-48 hours" >> $REPORT
          elif [ "${{ steps.evaluate-vulnerabilities.outputs.scan_status }}" = "high" ]; then
            echo "  - High: 1-2 weeks" >> $REPORT
          else
            echo "  - Medium/Low: Next release cycle" >> $REPORT
          fi
          echo "- **Automated Scanning:** Enabled (weekly and on push)" >> $REPORT
          echo "" >> $REPORT
          
          echo "---" >> $REPORT
          echo "*Automatically generated by GitHub Actions Dependency Scan*" >> $REPORT
          echo "" >> $REPORT

      # COMMIT AUTOMATICO DEL REPORTE (solo en ramas principales)
      - name: Commit security report
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/dependency-security-report.md
          # Solo hacer commit si hay cambios
          git diff --staged --quiet || (git commit -m "docs: Update dependency security report [skip ci]" && git push) || echo "No changes to commit"

  # EVALUACION FINAL DE SEGURIDAD
  security-assessment:
    name: Security Assessment
    runs-on: ubuntu-latest
    needs: dependency-scan
    if: always()
    
    steps:
      - name: Generate security assessment
        run: |
          echo "DEPENDENCY SECURITY ASSESSMENT"
          echo "=============================="
          echo "Critical Vulnerabilities: ${{ needs.dependency-scan.outputs.critical_vulnerabilities }}"
          echo "High Vulnerabilities: ${{ needs.dependency-scan.outputs.high_vulnerabilities }}"
          echo "Total Vulnerabilities: ${{ needs.dependency-scan.outputs.total_vulnerabilities }}"
          echo "Scan Status: ${{ needs.dependency-scan.outputs.scan_status }}"
          echo ""
          
          if [ "${{ needs.dependency-scan.outputs.scan_status }}" = "critical" ]; then
            echo "ASSESSMENT: FAILED - Critical vulnerabilities detected"
            echo "Immediate action required to update dependencies."
            exit 1
          elif [ "${{ needs.dependency-scan.outputs.scan_status }}" = "high" ]; then
            echo "ASSESSMENT: WARNING - High severity vulnerabilities detected"
            echo "Plan dependency updates in the near future."
          else
            echo "ASSESSMENT: PASSED - No critical security issues"
            echo "Dependencies are in a secure state."
          fi